name: End-to-End Tests

on:
  push:
    branches: [main]
  pull_request:

env:
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

jobs:
  cancel-previous-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@b173b6ec0100793626c2d9e6b90435061f4fc3e5 # pin@0.11.0
        with:
          access_token: ${{ github.token }}

  device-test:
    # Android emulator said to perform best with macos HAXM
    runs-on: macos-latest
    strategy:
      # we want that the matrix keeps running, default is to cancel them if it fails.
      fail-fast: false
      matrix:
        platform: ['ios', 'android']
        include:
          - platform: ios
            runtime: 'latest'
            device: 'iPhone 14'
    env:
      PLATFORM: ${{ matrix.platform }}
      RUNTIME: ${{ matrix.runtime }}
      DEVICE: ${{ matrix.device }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Install Global Dependencies
        run: yarn global add @sentry/cli yalc

      - name: NPM cache
        uses: actions/cache@v3
        id: deps-cache
        with:
          path: |
            node_modules
            sample/node_modules
          key: ${{ github.workflow }}-${{ github.job }}-npm-${{ hashFiles('yarn.lock', 'sample/yarn.lock') }}

      - name: iOS cache
        if: ${{ matrix.platform == 'ios' }}
        uses: actions/cache@v3
        with:
          path: |
            sample/ios/Pods
            sample/ios/DerivedData
          # Note: we cannot use sample/ios/Podfile.lock because it's not source controlled.
          key: ${{ github.workflow }}-${{ github.job }}-ios${{ matrix.runtime }}-${{ hashFiles('yarn.lock', 'sample/yarn.lock') }}

      - name: Install Dependencies
        if: ${{ steps.deps-cache.outputs['cache-hit'] != 'true' }}
        run: yarn install

      - name: Build SDK
        run: yarn build

      - name: Package SDK
        run: yalc publish

      - name: Prepare sample for testing
        working-directory: ./sample
        run: sh ./scripts/prepareConfigsForTesting.sh

      - name: Install SDK in sample
        working-directory: ./sample
        run: yalc add @sentry/react-native

      - name: Install Sample Dependencies
        if: ${{ steps.deps-cache.outputs['cache-hit'] != 'true' }}
        working-directory: ./sample
        run: yarn install

      - run: pod install
        if: ${{ matrix.platform == 'ios' }}
        working-directory: ./sample/ios
        env:
          # TEST env var is used in podfile to determine whether to include the sentry SDK from relative path or node_modules.
          TEST: true

      - name: Build ${{ matrix.platform }} sample app
        if: ${{ env.SENTRY_AUTH_TOKEN != null }}
        id: build
        working-directory: ./sample/${{ matrix.platform }}
        run: |
          if [[ "${{ matrix.platform }}" == "android" ]]; then
            ./gradlew :app:assembleRelease -PreactNativeArchitectures=x86
          else
            mkdir -p DerivedData
            defaults write com.apple.dt.Xcode ShowBuildOperationDuration YES
            buildArgs=(
              '-destination' 'platform=iOS Simulator,OS=${{ matrix.runtime }},name=${{ matrix.device }}'
              'ONLY_ACTIVE_ARCH=yes'
              '-derivedDataPath' $(cd "DerivedData" ; pwd -P)
            )
            echo "buildArgs = ${buildArgs[@]}"
            xcodebuild \
              -workspace sample.xcworkspace \
              -configuration Release \
              -scheme sample \
              "${buildArgs[@]}" \
              build
            xcodebuild \
              -project ../node_modules/appium-webdriveragent/WebDriverAgent.xcodeproj \
              -scheme WebDriverAgentRunner \
              GCC_TREAT_WARNINGS_AS_ERRORS=0 \
              COMPILER_INDEX_STORE_ENABLE=NO \
              "${buildArgs[@]}" \
              build
          fi

      - name: Start Appium Server
        working-directory: ./sample
        run: yarn run appium --log-timestamp --log-no-colors --log appium.${{ matrix.platform }}.log &

        # Wait until the Appium server starts.
      - name: Check Appium Server
        uses: nick-fields/retry@943e742917ac94714d2f408a0e8320f2d1fcafcd # pin@v2
        with:
          timeout_seconds: 60
          max_attempts: 10
          command: curl --output /dev/null --silent --head --fail http://127.0.0.1:4723/sessions

      - name: Run tests on Android
        if: ${{ matrix.platform == 'android' }}
        uses: reactivecircus/android-emulator-runner@50986b1464923454c95e261820bc626f38490ec0 # pin@v2
        with:
          api-level: 29
          emulator-options: -accel on -no-snapshot -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -timezone US/Pacific
          working-directory: sample
          script: |
            # Collect logs
            adb logcat '*:D' 2>&1 >adb.log &
            adb devices -l

            yarn test --verbose

      - name: Run tests on iOS
        if: ${{ matrix.platform == 'ios' }}
        working-directory: ./sample
        run: yarn test --verbose

      - name: Upload logs
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.platform }}-logs
          path: |
            ./sample/*.log
            ./sample/*.png

  react-native-build:
    name: Build RN ${{ matrix.rn-version }} ${{ matrix.rn-architecture }} ${{ matrix.platform }} ${{ matrix.build-type }}
    runs-on: macos-latest
    env:
      RN_DIFF_REPOSITORY: https://github.com/react-native-community/rn-diff-purge.git
    strategy:
      fail-fast: false # keeps matrix running if one fails
      matrix:
        rn-version: ['0.64.4', '0.71.0']
        rn-architecture: ['legacy']
        platform: ['android', 'ios']
        build-type: ['dev', 'production']
        include:
          - platform: ios
            runtime: 'latest'
            device: 'iPhone 14'
        # exclude all rn versions lower than 0.70.0 for new architecture
        exclude:
          - rn-version: '0.64.4'
            rn-architecture: 'new'
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Setup JS Tools
        run: yarn global add yalc semver

      - name: NPM cache SDK
        uses: actions/cache@v3
        id: deps-cache
        with:
          path: node_modules
          key: ${{ github.workflow }}-${{ github.job }}-npm-${{ hashFiles('yarn.lock') }}

      - name: Install SDK JS Dependencies
        if: ${{ steps.deps-cache.outputs['cache-hit'] != 'true' }}
        run: yarn install

      - name: Build SDK
        run: yarn build

      - name: Package SDK
        run: yalc publish

      - name: Download Plain RN ${{ matrix.rn-version }} App
        working-directory: test/react-native/versions
        run: git clone $RN_DIFF_REPOSITORY --branch release/${{ matrix.rn-version }} --single-branch ${{ matrix.rn-version }}

      - name: Add SDK to App
        working-directory: test/react-native/versions/${{ matrix.rn-version }}/RnDiffApp
        run: yalc add @sentry/react-native

      - name: Install App JS Dependencies
        working-directory: test/react-native/versions/${{ matrix.rn-version }}/RnDiffApp
        run: yarn install

      - name: Install App Pods
        if: ${{ matrix.platform == 'ios' }}
        working-directory: test/react-native/versions/${{ matrix.rn-version }}/RnDiffApp/ios
        run: |
          [[ "${{ matrix.build-type }}" == "production" ]] && ENABLE_PROD=1 || ENABLE_PROD=0
          [[ "${{ matrix.rn-architecture }}" == "new" ]] && ENABLE_NEW_ARCH=1 || ENABLE_NEW_ARCH=0
          echo "ENABLE_PROD=$ENABLE_PROD"
          echo "ENABLE_NEW_ARCH=$ENABLE_NEW_ARCH"
          PRODUCTION=$ENABLE_PROD RCT_NEW_ARCH_ENABLED=$ENABLE_NEW_ARCH pod install

      - name: Patch App RN
        working-directory: test/react-native/versions/${{ matrix.rn-version }}/RnDiffApp
        run: |
          patch --verbose --strip=0 --force --ignore-whitespace --fuzz 4 < ../../../rn.patch
          ../../../rn.patch.app.js --app .

      - name: Patch Android App RN
        if: ${{ matrix.platform == 'android' }}
        working-directory: test/react-native
        run: |
          ./rn.patch.app.build.gradle.js \
            --app-build-gradle 'versions/${{ matrix.rn-version }}/RnDiffApp/android/app/build.gradle'

      - name: Patch iOS App RN
        if: ${{ matrix.platform == 'ios' }}
        working-directory: test/react-native
        run: |
          ./rn.patch.xcode.js \
            --project 'versions/${{ matrix.rn-version }}/RnDiffApp/ios/RnDiffApp.xcodeproj/project.pbxproj' \
            --rn-version '${{ matrix.rn-version }}'

      - name: Build Android App
        if: ${{ matrix.platform == 'android' }}
        working-directory: test/react-native/versions/${{ matrix.rn-version }}/RnDiffApp/android
        run: |
          if [[ ${{ matrix.rn-architecture }} == 'new' ]]; then
            perl -i -pe's/newArchEnabled=false/newArchEnabled=true/g' gradle.properties
            echo 'New Architecture enabled'
          fi
          [[ "${{ matrix.build-type }}" == "production" ]] && CONFIG='Release' || CONFIG='Debug'
          echo "Building $CONFIG"
          ./gradlew ":app:assemble$CONFIG" -PreactNativeArchitectures=x86

      - name: Build iOS App
        if: ${{ matrix.platform == 'ios' }}
        working-directory: test/react-native/versions/${{ matrix.rn-version }}/RnDiffApp/ios
        run: |
          [[ "${{ matrix.build-type }}" == "production" ]] && CONFIG='Release' || CONFIG='Debug'
          echo "Building $CONFIG"
          mkdir -p "DerivedData"
          derivedData="$(cd "DerivedData" ; pwd -P)"
          xcodebuild \
            -workspace RnDiffApp.xcworkspace \
            -configuration "$CONFIG" \
            -scheme RnDiffApp \
            -destination 'platform=iOS Simulator,OS=${{ matrix.runtime }},name=${{ matrix.device }}' \
            ONLY_ACTIVE_ARCH=yes \
            -sdk 'iphonesimulator' \
            -derivedDataPath "$derivedData" \
            build
