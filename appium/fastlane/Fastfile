fastlane_version "2.48.0"
opt_out_crash_reporting

default_platform :ios

def validate_android_build_output(output)
  UI.user_error!("1 Missing output in log") unless output.scan(/POST \/api\/0\/projects\/sentry-test\/react-native\/releases\/com.awesomeproject.full-1.0-full\/files\//).size >= 1
  UI.user_error!("2 Missing output in log") unless output.scan(/POST \/api\/0\/projects\/sentry-test\/react-native\/releases\/com.awesomeproject.demo-1.0-demo\/files\//).size >= 1
  UI.user_error!("3 Missing output in log") unless output.scan(/"dist": "4", "name": "~\/index.android.bundle"/).size >= 1
  UI.user_error!("4 Missing output in log") unless output.scan(/"dist": "3", "name": "~\/index.android.bundle"/).size >= 1
  UI.user_error!("5 Missing output in log") unless output.scan(/"dist": "4", "name": "~\/index.android.bundle.map"/).size >= 1
  UI.user_error!("6 Missing output in log") unless output.scan(/"dist": "3", "name": "~\/index.android.bundle.map"/).size >= 1
  UI.success("Android build output validated")
end

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."

  end

  lane :build_for_local_appium do
    xcodebuild(
      scheme: "AwesomeProject",
      project: "example/ios/AwesomeProject.xcodeproj",
      destination: "generic/platform=iOS Simulator",
      configuration: "Release",
      derivedDataPath: "aws",
      xcargs: "GCC_PREPROCESSOR_DEFINITIONS='AWS_UI_TEST' ENABLE_BITCODE=NO CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO build-for-testing"
    )
  end

  lane :build_for_device_farm do
    xcodebuild(
      scheme: "AwesomeProject",
      project: "example/ios/AwesomeProject.xcodeproj",
      destination: "generic/platform=iOS",
      configuration: "Release",
      derivedDataPath: "aws",
      xcargs: "GCC_PREPROCESSOR_DEFINITIONS='AWS_UI_TEST' ENABLE_BITCODE=NO CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO build-for-testing"
    )
  end

  lane :aws_ios_upload_and_run do
    # ENV['AWS_ACCESS_KEY_ID']     = ''
    # ENV['AWS_SECRET_ACCESS_KEY'] = ''
    # ENV['AWS_REGION']            = 'us-west-2'

    # Transform .app into AWS compatible IPA
    aws_device_farm_package(
      derrived_data_path: "aws",
      configuration: "Release"
    )

    # RUN tests on AWS Device Farm
    aws_device_farm(
      name: "react-native",
      test_binary_path: "test_bundle.zip",
      test_package_type: "APPIUM_PYTHON_TEST_PACKAGE",
      test_type: 'APPIUM_PYTHON',
      allow_failed_tests: true
    )

    store_run_arn
  end

  lane :build_android_for_device_farm do
    android_build_output = sh("cd ../example/android/; ./gradlew assembleRelease --stacktrace")
    validate_android_build_output(android_build_output)
    sh("jarsigner -verbose  -digestalg SHA1 -sigalg MD5withRSA -keystore release.keystore -storepass 123456 ../example/android/app/build/outputs/apk/app-full-release-unsigned.apk release")
  end

  lane :aws_android_upload_and_run do
    aws_device_farm(
      name: "react-native",
      binary_path: "example/android/app/build/outputs/apk/app-full-release-unsigned.apk",
      device_pool: "Android",
      test_binary_path: "test_bundle.zip",
      test_package_type: "APPIUM_PYTHON_TEST_PACKAGE",
      test_type: 'APPIUM_PYTHON',
      allow_failed_tests: true
    )

    store_run_arn
  end

  lane :store_run_arn do
    sh("echo #{ENV['AWS_DEVICE_FARM_RUN_ARN']} > .aws.run.arn")
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end
